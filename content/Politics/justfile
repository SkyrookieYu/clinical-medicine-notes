OUTPUT := "output.csv"

clean:
	rm *.csv || true

convert_all: clean
	@for f in `ls *.yaml | cut -d. -f1`; do \
		echo "Converting \"${f}\".yaml to \"${f}.csv\"";\
		just _convert_csv "${f}";\
	done
	just _markdown_to_html

recite_2022:
	yq -r ".[] | [.UUID, .Q, .A, .created_time] | @csv" "2022_recite.yaml" >> "2022_recite.csv"
	just _markdown_to_html_2022

# Provided FILENAME (without extension), convert the yaml file into anki-compatible csv file
_convert_csv FILENAME:
	yq -r ".[] | [.UUID, .cloze, .created_time, \"{{FILENAME}}\"] | @csv" "{{FILENAME}}.yaml" >> "{{OUTPUT}}"

_markdown_to_html:
	#!/usr/bin/env python
	import markdown
	import pandas as pd
	from functools import partial
	import re

	INLINE_MATH_RE = re.compile(r"(?<!\\)\$([^\$]+)\$")
	BLOCK_MATH_RE = re.compile(r"(?<!\\)\$\$([^\$]+)\$\$")
	START_CLOZE_RE = re.compile(r"<p>{{ '{{' }}c(\d+)::</p>")
	END_CLOZE_RE = re.compile(r"<p>}}</p>")
	markdownfn = partial(
		markdown.markdown,
		extensions=['tables', 'fenced_code'],
	)

	def mapfn(text):
		text = markdownfn(text)
		text = BLOCK_MATH_RE.sub(r"\\[\1\\]", text)
		text = INLINE_MATH_RE.sub(r"\\(\1\\)", text)
		text = START_CLOZE_RE.sub(r"<p>{{ '{{' }}c\1::", text)
		text = END_CLOZE_RE.sub(r"}}</p>", text)
		return text

	df = pd.read_csv("./{{OUTPUT}}", names=["UUID", "cloze", "created_time", "tag"])
	df.cloze = df.cloze.map(mapfn)
	df.to_csv("./{{OUTPUT}}", header=False, index=False)

_markdown_to_html_2022:
	#!/usr/bin/env python
	import markdown
	import pandas as pd

	df = pd.read_csv("./2022_recite.csv", names=["UUID", "Q", "A", "created_time"])
	df.A = df.A.map(markdown.markdown)
	df.to_csv("./2022_recite.csv", header=False, index=False)
